// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Threading.Tasks;
using CoreGraphics;

namespace DataSaver
{
	public partial class SettingsViewController : NSViewController
	{
		public SettingsViewController(IntPtr handle) : base(handle)
		{
		}
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			SetupWifi();
			SetupActions();
			RunOnStartup.State = Settings.Shared.StartAtLogin ? NSCellStateValue.On : NSCellStateValue.Off;
			RunOnStartup.Activated += (s, e) =>
			{
				Settings.Shared.StartAtLogin = RunOnStartup.State == NSCellStateValue.On;
			};
		}

		void SetupWifi()
		{
			DeleteWifiButton.Enabled = false;
			//WifiTable.AddColumn (new NSTableColumn ("Enabled"){ Title = "Enabled"});
			WifiTable.AddColumn(new NSTableColumn("SSID") { Title = "SSID", ResizingMask = NSTableColumnResizing.Autoresizing });
			WifiTable.AddColumn(new NSTableColumn("Edit") { Title = "" });
			//WifiTable.AddColumn (new NSTableColumn ("Delete"){ Title = ""});
			WifiTable.Source = App.WiFiViewModel;
			App.WiFiViewModel.SelectionsChanged = () =>
				{
					DeleteWifiButton.Enabled = WifiTable.SelectedRowCount != 0;
				};


		}

		partial void DeleteWifi(Foundation.NSObject sender)
		{
			var row = WifiTable.SelectedRow;
			App.WiFiViewModel.Delete((int)row);
		}
			
		partial void AddWifi(Foundation.NSObject sender)
		{
			var text = App.GetTextInput("SSID", "SSID that start with *. will block all that contain that word", NetworkWatcher.CurrentSSID);
			if (string.IsNullOrWhiteSpace(text))
				return;
			var wifi = new WiFiClass
			{
				SSID = text
			};
			App.WiFiViewModel.Add(wifi);

		}

		void SetupActions()
		{
			DeleteActionButton.Enabled = false;
			ActionsTable.AddColumn(new NSTableColumn("") { Title = "" });
			ActionsTable.SizeLastColumnToFit();
			ActionsTable.RowHeight = 170;
			ActionsTable.Source = App.ActionsViewModel;
			App.ActionsViewModel.SelectionsChanged = () =>
				{
					DeleteActionButton.Enabled = ActionsTable.SelectedRowCount != 0;
				};
		}

		partial void DeleteAction(Foundation.NSObject sender)
		{
			var row = ActionsTable.SelectedRow;
			App.ActionsViewModel.Delete((int)row);

		}

		partial void AddAction(Foundation.NSObject sender)
		{
			var frame = new CGRect(0, 0, 500, 300);
			var view = new ActionView
			{
				Frame = frame,
				EditMode = true,
				Action = new ActionClass(),
			};


			var window = new NSWindow(frame, NSWindowStyle.Borderless | NSWindowStyle.Titled, NSBackingStore.Buffered, false)
			{
				Title = "Add Action",
				ContentView = view,
			};
			AppDelegate.CurrentWindow.BeginSheet(window, (nint obj) =>
			{

			}); ;
		}
	}
}
